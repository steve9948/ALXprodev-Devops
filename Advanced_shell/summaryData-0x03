#!/bin/bash

# Define the base API URL
BASE_API_URL="https://pokeapi.co/api/v2/pokemon"
ERROR_FILE="errors.txt"
POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
CSV_REPORT="pokemon_report.csv"

# Header for the CSV file
echo "Name,Height,Weight" > "$CSV_REPORT"

# Loop through the list of PokÃ©mon
for POKEMON in "${POKEMONS[@]}"; do
    OUTPUT_FILE="${POKEMON}.json"
    
    # Make the API request
    curl -s -o "$OUTPUT_FILE" -w "%{http_code}" "$BASE_API_URL/$POKEMON" | {
        read STATUS_CODE

        # Check the HTTP status code
        if [ "$STATUS_CODE" -ne 200 ]; then
            echo "Error: Request failed with status code $STATUS_CODE for $POKEMON" >> "$ERROR_FILE"
            echo "Details:" >> "$ERROR_FILE"
            cat "$OUTPUT_FILE" >> "$ERROR_FILE"
            echo "" >> "$ERROR_FILE" # Add a newline for readability
            rm -f "$OUTPUT_FILE" # Remove the incomplete output file
        else
            echo "API request successful for $POKEMON. Data saved to $OUTPUT_FILE."

            # Extract data and append to the CSV file
            NAME=$(jq -r '.name' "$OUTPUT_FILE")
            HEIGHT=$(jq -r '.height' "$OUTPUT_FILE" | awk '{printf "%.1f", $1 / 10}') # Convert decimeters to meters
            WEIGHT=$(jq -r '.weight' "$OUTPUT_FILE" | awk '{printf "%.1f", $1 / 10}') # Convert hectograms to kilograms

            echo "$NAME,$HEIGHT,$WEIGHT" >> "$CSV_REPORT"
        fi
    }

    # Delay to handle rate-limiting (1 second)
    sleep 1

done

# Calculate average height and weight using awk
awk -F, 'NR > 1 { total_height += $2; total_weight += $3; count++ } \
    END { \
        if (count > 0) { \
            printf "\nAverage Height: %.2f m\n", total_height / count; \
            printf "Average Weight: %.2f kg\n", total_weight / count; \
        } else { \
            print "No data to calculate averages." \
        } \
    }' "$CSV_REPORT"

