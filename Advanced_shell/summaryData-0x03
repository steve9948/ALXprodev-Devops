#!/bin/bash

# Define the base API URL
BASE_API_URL="https://pokeapi.co/api/v2/pokemon"
ERROR_FILE="errors.txt"
POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
CSV_REPORT="pokemon_report.csv"

# Header for the CSV file
echo "Name,Height,Weight" > "$CSV_REPORT"

# Function to make API requests
make_request() {
    local POKEMON=$1
    local OUTPUT_FILE=$2

    STATUS_CODE=$(curl -s -o "$OUTPUT_FILE" -w "%{http_code}" "$BASE_API_URL/$POKEMON")

    if [ "$STATUS_CODE" -eq 200 ]; then
        echo "API request successful for $POKEMON. Data saved to $OUTPUT_FILE."
        return 0
    else
        echo "Failed to fetch data for $POKEMON (Status Code: $STATUS_CODE)." >> "$ERROR_FILE"
        return 1
    fi
}

# Extract data from JSON files and append to CSV
extract_data() {
    for POKEMON in "${POKEMONS[@]}"; do
        OUTPUT_FILE="${POKEMON}.json"

        if [ -f "$OUTPUT_FILE" ]; then
            NAME=$(jq -r '.name' "$OUTPUT_FILE")
            HEIGHT=$(jq -r '.height' "$OUTPUT_FILE" | awk '{printf "%.1f", $1 / 10}') # Convert decimeters to meters
            WEIGHT=$(jq -r '.weight' "$OUTPUT_FILE" | awk '{printf "%.1f", $1 / 10}') # Convert hectograms to kilograms

            echo "$NAME,$HEIGHT,$WEIGHT" >> "$CSV_REPORT"
        else
            echo "Warning: $OUTPUT_FILE not found. Skipping..." >> "$ERROR_FILE"
        fi
    done
}

# Generate CSV report
for POKEMON in "${POKEMONS[@]}"; do
    OUTPUT_FILE="${POKEMON}.json"
    make_request "$POKEMON" "$OUTPUT_FILE"
done

extract_data

# Calculate average height and weight using awk
awk -F, 'NR > 1 { total_height += $2; total_weight += $3; count++ } \
    END { \
        if (count > 0) { \
            printf "\nAverage Height: %.2f m\n", total_height / count; \
            printf "Average Weight: %.2f kg\n", total_weight / count; \
        } else { \
            print "No data to calculate averages." \
        } \
    }' "$CSV_REPORT"
