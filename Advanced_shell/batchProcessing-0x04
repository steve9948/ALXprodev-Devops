#!/bin/bash

# Define the base API URL
BASE_API_URL="https://pokeapi.co/api/v2/pokemon"
ERROR_FILE="errors.txt"
POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
CSV_REPORT="pokemon_report.csv"

# Header for the CSV file
echo "Name,Height,Weight" > "$CSV_REPORT"

# Function to make API requests with retry logic
make_request() {
    local POKEMON=$1
    local OUTPUT_FILE=$2
    local MAX_RETRIES=3
    local RETRY_DELAY=2
    local ATTEMPT=1

    while [ $ATTEMPT -le $MAX_RETRIES ]; do
        STATUS_CODE=$(curl -s -o "$OUTPUT_FILE" -w "%{http_code}" "$BASE_API_URL/$POKEMON")

        if [ "$STATUS_CODE" -eq 200 ]; then
            echo "API request successful for $POKEMON. Data saved to $OUTPUT_FILE."
            return 0
        else
            echo "Attempt $ATTEMPT: Failed to fetch data for $POKEMON (Status Code: $STATUS_CODE)." >> "$ERROR_FILE"
            ((ATTEMPT++))
            sleep $RETRY_DELAY
        fi
    done

    echo "Error: All attempts failed for $POKEMON. Skipping..." >> "$ERROR_FILE"
    return 1
}

# Function to handle parallel processing for fetching data
fetch_data_in_parallel() {
    for POKEMON in "${POKEMONS[@]}"; do
        OUTPUT_FILE="${POKEMON}.json"

        {
            if make_request "$POKEMON" "$OUTPUT_FILE"; then
                # Extract data and append to the CSV file
                NAME=$(jq -r '.name' "$OUTPUT_FILE")
                HEIGHT=$(jq -r '.height' "$OUTPUT_FILE" | awk '{printf "%.1f", $1 / 10}') # Convert decimeters to meters
                WEIGHT=$(jq -r '.weight' "$OUTPUT_FILE" | awk '{printf "%.1f", $1 / 10}') # Convert hectograms to kilograms

                echo "$NAME,$HEIGHT,$WEIGHT" >> "$CSV_REPORT"
            fi
        } &
    done

    # Wait for all background processes to complete
    wait
}

# Start fetching data in parallel
fetch_data_in_parallel

# Calculate average height and weight using awk
awk -F, 'NR > 1 { total_height += $2; total_weight += $3; count++ } \
    END { \
        if (count > 0) { \
            printf "\nAverage Height: %.2f m\n", total_height / count; \
            printf "Average Weight: %.2f kg\n", total_weight / count; \
        } else { \
            print "No data to calculate averages." \
        } \
    }' "$CSV_REPORT"
